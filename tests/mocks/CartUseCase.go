// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	filter "github.com/Risuii/models/filter"
	mock "github.com/stretchr/testify/mock"

	product "github.com/Risuii/models/product"

	response "github.com/Risuii/helpers/response"
)

// CartUseCase is an autogenerated mock type for the CartUseCase type
type CartUseCase struct {
	mock.Mock
}

// AddItems provides a mock function with given fields: ctx, params
func (_m *CartUseCase) AddItems(ctx context.Context, params product.Product) response.Response {
	ret := _m.Called(ctx, params)

	var r0 response.Response
	if rf, ok := ret.Get(0).(func(context.Context, product.Product) response.Response); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(response.Response)
		}
	}

	return r0
}

// DeleteItems provides a mock function with given fields: ctx, kodeProduk
func (_m *CartUseCase) DeleteItems(ctx context.Context, kodeProduk string) response.Response {
	ret := _m.Called(ctx, kodeProduk)

	var r0 response.Response
	if rf, ok := ret.Get(0).(func(context.Context, string) response.Response); ok {
		r0 = rf(ctx, kodeProduk)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(response.Response)
		}
	}

	return r0
}

// GetItems provides a mock function with given fields: ctx, params
func (_m *CartUseCase) GetItems(ctx context.Context, params filter.Filter) response.Response {
	ret := _m.Called(ctx, params)

	var r0 response.Response
	if rf, ok := ret.Get(0).(func(context.Context, filter.Filter) response.Response); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(response.Response)
		}
	}

	return r0
}

type mockConstructorTestingTNewCartUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewCartUseCase creates a new instance of CartUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCartUseCase(t mockConstructorTestingTNewCartUseCase) *CartUseCase {
	mock := &CartUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
